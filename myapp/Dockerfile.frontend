# Use Node.js as the base image
FROM node:20-alpine AS base

# Prune the monorepo to get only what we need for frontend
FROM base AS pruner
WORKDIR /app
COPY . .
RUN npx turbo prune --scope=frontend --docker

# Install dependencies
FROM base AS installer
WORKDIR /app
COPY --from=pruner /app/out/json/ .
COPY --from=pruner /app/out/yarn.lock ./yarn.lock
# Use the appropriate lockfile based on your package manager:
# For npm: COPY --from=pruner /app/out/package-lock.json ./package-lock.json
# For pnpm: COPY --from=pruner /app/out/pnpm-lock.yaml ./pnpm-lock.yaml
RUN npm install

# Build the app
FROM installer AS builder
WORKDIR /app
COPY --from=pruner /app/out/full/ .
COPY turbo.json turbo.json
RUN npx turbo build --filter=frontend...

# Production image - Next.js example
FROM base AS runner
WORKDIR /app
ENV NODE_ENV production

# For Next.js
COPY --from=builder /app/apps/frontend/.next/standalone ./
COPY --from=builder /app/apps/frontend/.next/static ./apps/frontend/.next/static
COPY --from=builder /app/apps/frontend/public ./apps/frontend/public

# For React/Vite, uncomment these and comment out the Next.js lines above
# FROM nginx:alpine AS runner
# WORKDIR /usr/share/nginx/html
# COPY --from=builder /app/apps/frontend/dist .
# COPY apps/frontend/nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 3000

# For Next.js
CMD ["node", "apps/frontend/server.js"]

# For React/Vite, uncomment this and comment out the Next.js CMD above
# CMD ["nginx", "-g", "daemon off;"]